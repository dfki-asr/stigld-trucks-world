prefix ex: <http://example.org/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix st: <http://dfki.de/stigld#>
prefix stigFN: <http://www.dfki.de/func#>

###########################################################
## IF THERE ARE PARCELS IN THE CURRENT LOCATION OF WHICH
## THE DEADLINE HAS EXCEEDED THE CONFIDENCE INTERVAL,
## EMPTY AREAS UNTIL THERE IS SPACE FOR THE URGENT PARCELS
###########################################################

INSERT {
  ?task a ex:Task , ex:UnloadTask ; ex:startTime ?now ; ex:endTime ?endTime ; ex:assignedTo ?truck .
} WHERE {

  ## TRUCK AND RESPECTIVE LOCATION TO WHICH NUMBER OF PACKAGES AND FREE AREAS WILL BE BOUND
  ?truck a ex:Truck ; ex:located ?location .

  ## COUNT NUMBER OF FREE PACKAGES IN THE AREA OF WHICH THE DEADLINE IS OUTSIDE THE CONFIDENCE INTERVAL
  {SELECT (COUNT(?package) as ?numPackages) ?location WHERE {
     ?truck a ex:Truck ; ex:located ?location .
     ?package a ex:Package ; ex:located ?location ; st:carries [ a ex:UrgencyStigma ] .
  } GROUP BY ?location}

  ## COUNT NUMBER OF FREE AREAS IN THE TRUCK
  {SELECT (COUNT(?area) as ?freeAreas) ?truck WHERE {
    ?truck a ex:Truck ; ex:areas ?area .
    ?area ex:status ex:empty .
  } GROUP BY ?truck }

  ## COUNT NUMBER OF FREE AREAS IN THE TRUCK
  {SELECT (COUNT(?area) as ?totalAreas) ?truck WHERE {
    ?truck a ex:Truck ; ex:areas ?area .

    ## PREVENT TRUCK FROM UNLOADING URGENT PACKAGES
    FILTER NOT EXISTS {
      ?package a ex:Package ; ex:located ?area ; st:carries ex:UrgencyStigma .
    }
  } GROUP BY ?truck }

  ## TASK BLANK NODE
  {SELECT DISTINCT (UUID() as ?task) ?truck WHERE {
    ?truck a ex:Truck
  }}

  ## ONLY ASSIGN TASK TO TRUCK IF TRUCK DOES NOT HAVE ENOUGH FREE AREAS
  FILTER(?numPackages > ?freeAreas && ?freeAreas < ?totalAreas)

  OPTIONAL { ex:Clock rdf:value ?clocktime	}
  BIND(IF(bound(?clocktime), ?clocktime, 0) as ?now)
  BIND((?now + 0.2) as ?endTime )
}
